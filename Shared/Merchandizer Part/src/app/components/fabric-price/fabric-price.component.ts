import { Component, OnInit, ÉµConsole } from '@angular/core';
import { FabricPriceServiceService } from 'src/app/services/fabric-price-service.service';
import { FabricPriceModel } from 'src/app/models/fabric-price.model';
import { Buyers } from 'src/app/models/buyers.model';
import { BuyersService } from 'src/app/services/buyers.service';
import { NgForm } from '@angular/forms';
import { DatePipe } from '@angular/common';
import { SizelistService } from 'src/app/services/sizelist.service';
import { SizeList } from 'src/app/models/sizelist.model';
import { FabricType } from 'src/app/models/fabric-type.model';
import { ItemNameService } from 'src/app/services/item-name.service';
import { FabricTypeService } from 'src/app/services/fabric-type.service';
import { Items } from 'src/app/models/item.model';

@Component({
  selector: 'app-fabric-price',
  templateUrl: './fabric-price.component.html',
  styleUrls: ['./fabric-price.component.css']
})
export class FabricPriceComponent implements OnInit {

  allEntry: FabricPriceModel[];
  today: any = Date.now(); 
  autoID: any;
  allBuyers: Buyers[];
  allSize: SizeList[];
  allFabricType: FabricType[];
  allItems: Items[];
  BoysTshirtSelected: boolean = false;
  JacketSelected: boolean = false;
  ShortsSelected: boolean = false;

  constructor(public FabPriService: FabricPriceServiceService,
              private DP: DatePipe,
              private Bs:BuyersService,
              private Sl: SizelistService,
              private ft: FabricTypeService,
              private In: ItemNameService,) { }

  ngOnInit() {
    const present = this.DP.transform(this.today, "dd-MM-yyyy");
    this.today = present;
    this.getAll();
    this.getAutoGeneratedID();
    this.getAllBuyersList();
    this.getAllSize();
    this.getAllFabrics();
    this.getAllItems();
  }
  //GET FUNCTION
  getAll(){
    this.FabPriService.getAllEntries()
    .subscribe(
      (data: FabricPriceModel[])=>{
        this.allEntry = data;
        // console.log(data);
      });
  }

  //POST FUNCTION

  //UPDATE FUNCTION

  //DELETE FUNCTION

  //this part is for fetching the AutoGenerated ID from the database
  getAutoGeneratedID(){
    this.FabPriService.getFabricEntry_ID()
    .subscribe(
      res => {
        this.autoID = res['FabricID'];
      },
      err => {
        console.log(err);
      }); 
     
   }
  //this is for getting all the buyers list from database
  getAllBuyersList(){
    this.Bs.getAllBuyers()
    .subscribe(
       (data : Buyers[]) =>{
         this.allBuyers = data;
        //  console.log(data);
       });
  }
   //this is for getting all the sizes list from database
   getAllSize(){
    this.Sl.getAllSizeList()
    .subscribe(
       (data : SizeList[]) =>{
         this.allSize = data;
        //  console.log(data);
       });
  }
   //this is for getting all the types of fabrics from database
   getAllFabrics(){
    this.ft.getAllFabricsType()
    .subscribe(
      (data: FabricType[]) => {
        this.allFabricType = data;
        // console.log(data);
      });  
  }
   //this is for getting all the items name from database
   getAllItems(){
    this.In.getAllItemNamesList()
    .subscribe(
      (data: Items[])=>{
        this.allItems = data;
        // console.log(data);
      })
  }
  //this is for selecting which fields to show upon item name selection
  selectSwitch(x: any){
    this.FabPriService.currentEntry.fabricPriceInformation[0].itemName = x;
     if(x == "BoysS/Slv Tshirt"){
         this.BoysTshirtSelected = true;
         this.JacketSelected = false;
         this.ShortsSelected = false;
     }
     else if(x =="Jacket"){
       this.BoysTshirtSelected = false;
         this.JacketSelected = true;
         this.ShortsSelected = false;
     }
     else{
       this.BoysTshirtSelected = false;
         this.JacketSelected = false;
         this.ShortsSelected = true;
     }   
   }
    //this function is for calculating the fabric weight
  calculateFabricWeight(){
    var wastePercentage: any= 0; //waste percentage
    var chestsize: any= 0;
    var lengthsize: any= 0 ;
    var sleevesize: any = 0;
    var hoodsize: any= 0;
    var bottomsize: any = 0;
    var thighsize: any = 0;
    var pocketsize: any = 0;
    var fabricsize: any= 0;// for gsm value
    wastePercentage = this.fabricpriceservice.currentFabricCalc.waste_percentage;
    fabricsize = this.fabricpriceservice.currentFabricCalc.fabrics;
    //conversion from inch to cm
    if(this.fabricpriceservice.currentFabricCalc.chest_unit_of_measurement=='Inch'){
      chestsize = this.fabricpriceservice.currentFabricCalc.chest*2.54;
    }else{
      chestsize = this.fabricpriceservice.currentFabricCalc.chest;
    }
    if(this.fabricpriceservice.currentFabricCalc.thigh_unit_of_measurement=='Inch'){
      thighsize = this.fabricpriceservice.currentFabricCalc.thigh*2.54;
    }else{
      thighsize = this.fabricpriceservice.currentFabricCalc.thigh;
    }

    if(this.fabricpriceservice.currentFabricCalc.length_unit_of_measurement=='Inch'){
      lengthsize = this.fabricpriceservice.currentFabricCalc.length*2.54;
    }else{
      lengthsize = this.fabricpriceservice.currentFabricCalc.length;
    }

    if(this.fabricpriceservice.currentFabricCalc.sleeve_unit_of_measurement=='Inch'){
      sleevesize = this.fabricpriceservice.currentFabricCalc.sleeve*2.54;
    }else{
      sleevesize = this.fabricpriceservice.currentFabricCalc.sleeve;
    }

    if(this.fabricpriceservice.currentFabricCalc.hood_unit_of_measurement=='Inch'){
      hoodsize = this.fabricpriceservice.currentFabricCalc.hood*2.54;
    }else{
      hoodsize = this.fabricpriceservice.currentFabricCalc.hood;
    }

    if(this.fabricpriceservice.currentFabricCalc.bottom_unit_of_measurement=='Inch'){
      bottomsize = this.fabricpriceservice.currentFabricCalc.bottom*2.54;
    }else{
      bottomsize = this.fabricpriceservice.currentFabricCalc.bottom;
    }
    
    if(this.fabricpriceservice.currentFabricCalc.pocket_unit_of_measurement=='Inch'){
      pocketsize = this.fabricpriceservice.currentFabricCalc.pocket*2.54;
    }else{
      pocketsize = this.fabricpriceservice.currentFabricCalc.pocket;
    }
    //this part is for calculating the boys tshirt fabric
    var step1 : any = 0;
    step1 = parseFloat(lengthsize) + parseFloat(sleevesize);
    var step2 : any= 0;
    step2 =((step1*parseFloat(chestsize)*2*parseFloat(fabricsize))/(Math.pow(10,7)))*12;
    var step3: any = 0;
    step3 = (((wastePercentage)/100)*step2);
    var step4: any = 0;
    step4 = (step2 + step3);
    var convertoFloat; 
    convertoFloat = parseFloat(step4).toFixed(5);
    this.fabricWeight = convertoFloat;//main answer for fabric calculation
    //end of fabric calculation of boys tshirt
  }

  

}
