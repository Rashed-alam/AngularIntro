import { Component, OnInit, ÉµConsole } from '@angular/core';
import { FabricPriceServiceService } from 'src/app/services/fabric-price-service.service';
import { FabricPriceModel } from 'src/app/models/fabric-price.model';
import { Buyers } from 'src/app/models/buyers.model';
import { BuyersService } from 'src/app/services/buyers.service';
import { DatePipe } from '@angular/common';
import { FabricType } from 'src/app/models/fabric-type.model';
import { ItemNameService } from 'src/app/services/item-name.service';
import { FabricTypeService } from 'src/app/services/fabric-type.service';
import { Items } from 'src/app/models/item.model';

@Component({
  selector: 'app-fabric-price',
  templateUrl: './fabric-price.component.html',
  styleUrls: ['./fabric-price.component.css']
})
export class FabricPriceComponent implements OnInit {
  allEntry: FabricPriceModel[];
  today: any = Date.now(); 
  autoID: any;
  allBuyers: Buyers[];
  allFabricType: FabricType[];
  allItems: Items[];
  BoysTshirtSelected: boolean = false;
  JacketSelected: boolean = false;
  ShortsSelected: boolean = false;
  newcurrency;
  setcurrency;
  setMeasurementUnit;
  showsuccessmessageforsubmitting: boolean = false;
  serverErrorMessages: any = false;
  showdeletemessage: boolean = false;
  showeditmessage: boolean = false;
  showsuccessmessageforsize: boolean = false;
  showDuplicateErrorMessage: boolean= false;
  allReference: any;
  CalculateButtonPressed: boolean = false;
  entryShowList: any;
  buyerAddressInfo: any;
  temporaryDataStorage: any;
  hiddingrefIdandStyleCode: boolean = false;
  defaultWastePercentage: any = 20;
  defaultCurrency: any = "USD";
  defaultUnitofMeasurement : any = "cm";
  name: any;
   buyerCode:any;

  constructor(public FabPriService: FabricPriceServiceService,
              private DP: DatePipe,
              private Bs:BuyersService,
              private ft: FabricTypeService,
              private In: ItemNameService,
              ) { }

  ngOnInit() {
    this.todayDate();
    this.getAutoGeneratedID();
    this.getAllBuyersList();
    this.getAllFabrics();
    this.getAllItems();
    this.getReferences();
    this.clearAll();
  }

  //GET FUNCTION For fetching the whole list from database
  SearchByReference(a){
    this.FabPriService.getAllEntries(a)
    .subscribe(
    (data)=>{
      this.entryShowList = data;
    });
  }
  //CREATE AND UPDATE FUNCTION
  onsubmit(key){
    if(key._id  == null){
      this.create(key);
    }
    else{
      this.update(key);
    }
  }
  todayDate(){
    const present = this.DP.transform(this.today, "dd-MM-yyyy");
    this.today = present;
    this.FabPriService.currentEntry.entryDate = new Date();
    this.FabPriService.currentEntry.mailDate = new Date();
   
    
  }
 //POST FUNCTION
 create(entry: any){
    this.FabPriService.currentEntry.buyerCode = this.buyerAddressInfo[0].buyerCode;
    this.FabPriService.currentEntry.buyerName = this.buyerAddressInfo[0].name;
   this.FabPriService.currentEntry.fabricPriceInformation[0].unitOfMeasurement = this.defaultUnitofMeasurement;
   this.FabPriService.currentEntry.fabricPriceInformation[0].currency = this.defaultCurrency;
   this.FabPriService.currentEntry.referenceId = entry.referenceId.toUpperCase();
  this.FabPriService.currentEntry.fabricPriceInformation[0].styleCode = entry.fabricPriceInformation[0].styleCode.toUpperCase();
  this.FabPriService.createEntry(entry)
  .subscribe(
    res => {
      this.showsuccessmessageforsubmitting = true;
      setTimeout(() => this.showsuccessmessageforsubmitting = false, 4000);
      
      this.softClear();
      this.getReferences();
      this.hiddingrefIdandStyleCode = true;
      // this.router.navigateByUrl('/price');
    },
    err => {
      if (err.status === 422) {
        this.serverErrorMessages = err.error.join('<br/>');
      }
      else
        this.serverErrorMessages = "";
    });
}
  //UPDATE FUNCTION
  update(entry: any){
    this.FabPriService.currentEntry.buyerCode = this.buyerAddressInfo[0].buyerCode;
    this.FabPriService.currentEntry.buyerName = this.buyerAddressInfo[0].name;
    this.FabPriService.updateEntry(entry)
    .subscribe((res)=>{
      this.showeditmessage=true;
      this.clearAll();
      setTimeout(()=>this.showeditmessage=false,4000);
     // console.log(res);
    });
  }
 //ASSIGNING OBJECT FROM DATABASE TO THE FRONTEND FORM
 onedit(entry: any){
   console.log(entry);
  this.hiddingrefIdandStyleCode = true;
  this.CalculateButtonPressed = true;
  this.FabPriService.getByStyleCode(entry)
  .subscribe((res)=>{
    this.temporaryDataStorage = res;
    this.FabPriService.currentEntry = Object.assign({},this.temporaryDataStorage[0]);
    this.FabPriService.currentEntry.entryDate = new Date(this.FabPriService.currentEntry.entryDate);
    this.FabPriService.currentEntry.mailDate = new Date(this.FabPriService.currentEntry.mailDate);
    this.FabPriService.currentEntry.fabricPriceInformation[0] = Object.assign({},this.temporaryDataStorage[0].fabricPriceInformation);
    // this.FabPriService.currentEntry.buyerCode = this.buyerAddressInfo[0].buyerCode;
    // this.FabPriService.currentEntry.buyerName = this.buyerAddressInfo[0].name;
   
  });
  
  
}
// getBuyerForEdit(buyerCode){
//   let x =this.allBuyers.find(x=>x.buyerCode ==buyerCode);
//   this.FabPriService.currentEntry.buyerName=x.name;
// }
 //DELETE FUNCTION
 ondelete(item: any){
   var ref = item.referenceId;
  var confirmation;
  confirmation= confirm("Are you sure ?");
  if(confirmation == true){
    this.FabPriService.deleteEntry(item).subscribe((data) =>{
      console.log(data);
      this.showdeletemessage=true;
      setTimeout(()=>this.showdeletemessage=false,4000);
      this.getReferences();
      this.SearchByReference(ref);
    });
   }
   
}
  //this part is for fetching the AutoGenerated ID from the database
  getAutoGeneratedID(){
    this.FabPriService.getFabricEntry_ID()
    .subscribe(
      res => {
        this.autoID = res['FabricID'];
      },
      err => {
        console.log(err);
      }); 
     
   }
  //this is for getting all the buyers list from database
  getAllBuyersList(){
    this.Bs.getAllBuyers()
    .subscribe(
       (data : Buyers[]) =>{
         this.allBuyers = data;
         console.log(this.allBuyers);
       });
  }
  //this is for getting buyer addresss after selecting buyer from the dropdown list
  BuyerAddress(a){
    console.log(a);
    //this.getBuyerForEdit(a);
    this.Bs.getBuyerInformation(a)
    .subscribe(
      (data)=>{
        this.buyerAddressInfo = data;
 });
  }
   //this is for getting all the types of fabrics from database
   getAllFabrics(){
    this.ft.getAllFabricsType()
    .subscribe(
      (data: FabricType[]) => {
        this.allFabricType = data;
        // console.log(data);
      });  
  }
   //this is for getting all the items name from database
   getAllItems(){
    this.In.getAllItemNamesList()
    .subscribe(
      (data: Items[])=>{
        this.allItems = data;
        // console.log(data);
      })
  }
  //this is for creating new items
  createItem(a :Items){
    console.log(a);
    this.In.createItemEntry(a)
    .subscribe(
      res => {
        if(res['Success'] == true){
          this.showsuccessmessageforsize = true;
          setTimeout(() => this.showsuccessmessageforsize = false, 4000);
          
        } else {
          if(res['Success'] == false){
            this.showDuplicateErrorMessage= true;
            setTimeout(() => this.showDuplicateErrorMessage = false, 4000);
          }
          else{
            console.log('server error')
          }
        }
        this.getAllItems();
      }
      
    );
  }
  //this is for selecting which fields to show upon item name selection
  selectSwitch(x: any){
    this.FabPriService.currentEntry.fabricPriceInformation[0].itemName = x;
     if(x == "BoysS/Slv Tshirt"){
         this.BoysTshirtSelected = true;
         this.JacketSelected = false;
         this.ShortsSelected = false;
     }
     else if(x =="Jacket"){
       this.BoysTshirtSelected = false;
         this.JacketSelected = true;
         this.ShortsSelected = false;
     }
     else{
       this.BoysTshirtSelected = false;
         this.JacketSelected = false;
         this.ShortsSelected = true;
     }   
   }
  setCurrency(w) {
    this.setcurrency = w;
    this.FabPriService.currentEntry.fabricPriceInformation[0].currency= this.setcurrency;
    
  }
  //For setting the measurement unit from the form
  setUnit(a){
    this.setMeasurementUnit= a;
    this.FabPriService.currentEntry.fabricPriceInformation[0].unitOfMeasurement = this.setMeasurementUnit;
  }
  //THIS CLEARS ALL THE FORM FIELDS
  clearAll(){
    this.hiddingrefIdandStyleCode = false;
    this.FabPriService.currentEntry={
      auto_id: null,
    mailDate : new Date,
    entryDate : new Date,
    buyerName : '',
    buyerCode:'',
    size : '',
    referenceId : '',
    season : '',
    shipmentDone: null,
    fabricPriceInformation : [  {
            styleCode : '',
            fabricType : null,
            itemName : '',
            wastePercentage : null,
            chestSize : null,
            unitOfMeasurement:'',
            lengthSize : null,
            sleeveSize : null,
            hoodSize : null,
            bottomSize : null,
            thighSize : null,
            pocketSize : null,
            fabricWeight : null,
            currency : '',
            fabricUnitPrice : null,
            fabricTotalPrice : null,
            rimPrice : null,
            cmPrice : null,
            trimPrice : null,
            printPrice : null,
            docPrice : null,
            perDozenPrice : null,
            perUnitPrice : null
        }
    ]
    }
  } 
  //GETTING ALL THE RERERENCE Id's FROM DATABASE
  getReferences(){
    this.FabPriService.getAllReferences()
    .subscribe(
      (data)=>{
        this.allReference = data;
       // this.FabPriService.currentEntry.entryDate = new Date(this.FabPriService.currentEntry.entryDate );
        // console.log(data);
      });
  }
  //this is for leaving the basic info UNCLEARED
  softClear(){
    this.FabPriService.currentEntry={
      auto_id: this.FabPriService.currentEntry.auto_id,
      mailDate : this.FabPriService.currentEntry.mailDate,
      entryDate : this.FabPriService.currentEntry.entryDate,
      buyerName : this.FabPriService.currentEntry.buyerName,
      buyerCode: this.FabPriService.currentEntry.buyerCode,
      season : this.FabPriService.currentEntry.season,
     shipmentDone: null,
      size : this.FabPriService.currentEntry.size,
      referenceId : this.FabPriService.currentEntry.referenceId,
      fabricPriceInformation : [  {
              styleCode : '',
              fabricType : null,
              itemName : '',
              wastePercentage : null,
              chestSize : null,
              unitOfMeasurement:'',
              lengthSize : null,
              sleeveSize : null,
              hoodSize : null,
              bottomSize : null,
              thighSize : null,
              pocketSize : null,
              fabricWeight : null,
              currency : '',
              fabricUnitPrice : null,
              fabricTotalPrice : null,
              rimPrice : null,
              cmPrice : null,
              trimPrice : null,
              printPrice : null,
              docPrice : null,
              perDozenPrice : null,
              perUnitPrice : null
          }
      ]
    }
  }
  //for doing all the fabric-price calculation
  calculation(){
       //FABRIC WEIGHT CALCULATION PART
       this.CalculateButtonPressed = true;
       var wastePercentage: number= 0; //waste percentage
       var chestsize: number= 0;
       var lengthsize: number= 0 ;
       var sleevesize: number = 0;
       var fabricsize: number= 0;// for gsm value
      //  console.log(this.defaultWastePercentage);  
      this.FabPriService.currentEntry.fabricPriceInformation[0].wastePercentage =this.defaultWastePercentage
        wastePercentage = this.FabPriService.currentEntry.fabricPriceInformation[0].wastePercentage;
       fabricsize = this.FabPriService.currentEntry.fabricPriceInformation[0].fabricType;
     // console.log(this.FabPriService.currentEntry.fabricPriceInformation[0].wastePercentage);
       //conversion from inch to cm
       if(this.FabPriService.currentEntry.fabricPriceInformation[0].unitOfMeasurement=='Inch'){
        chestsize = (this.FabPriService.currentEntry.fabricPriceInformation[0].chestSize) * 2.54;
        lengthsize = (this.FabPriService.currentEntry.fabricPriceInformation[0].lengthSize)*2.54;
        sleevesize = (this.FabPriService.currentEntry.fabricPriceInformation[0].sleeveSize)*2.54;
       }else{
         chestsize = this.FabPriService.currentEntry.fabricPriceInformation[0].chestSize;
         lengthsize = this.FabPriService.currentEntry.fabricPriceInformation[0].lengthSize;
         sleevesize = this.FabPriService.currentEntry.fabricPriceInformation[0].sleeveSize;
       }
   
       //this part is for calculating the boys tshirt fabric
       var step1 : number = 0;
       step1 = (lengthsize + sleevesize);
       var step2 : number= 0;
       step2 =((step1*(chestsize)*2*(fabricsize))/(Math.pow(10,7)))*12;
       var step3: number = 0;
       step3 = (((wastePercentage)/100)*step2);
       var step4: number = 0;
       step4 = (step2 + step3);
       var convertoFloat; 
       convertoFloat = (step4).toFixed(5);
       this.FabPriService.currentEntry.fabricPriceInformation[0].fabricWeight = convertoFloat;//main answer for fabric calculation
       //end of fabric calculation of boys tshirt
   
   //END OF FABRIC WEIGHT CALCULATION PART


   //PRICE CALCULATION
   var FabricAmount: number = 0; //waste percentage
   var FabricUnitPrice: number = 0;
   var FabricTotalPrize: number = 0;
   var Rib: number = 0;
   var CM: number = 0;
   var TRIM: number = 0;
   var Print: number = 0;
   var Doc: number = 0;
   var step5: number = 0;
   var step6;
   var step7: number = 0;

   FabricAmount = this.FabPriService.currentEntry.fabricPriceInformation[0].fabricWeight ;
   FabricUnitPrice = this.FabPriService.currentEntry.fabricPriceInformation[0].fabricUnitPrice;
   step5 = ((FabricAmount) * (FabricUnitPrice));
   var con1: any = 0;
   con1 = step5.toFixed(2);
   this.FabPriService.currentEntry.fabricPriceInformation[0].fabricTotalPrice = con1;

   Rib = this.FabPriService.currentEntry.fabricPriceInformation[0].rimPrice;
   TRIM = this.FabPriService.currentEntry.fabricPriceInformation[0].trimPrice;
   CM = this.FabPriService.currentEntry.fabricPriceInformation[0].cmPrice;
   Print = this.FabPriService.currentEntry.fabricPriceInformation[0].printPrice;
   Doc = this.FabPriService.currentEntry.fabricPriceInformation[0].docPrice;
   step6 = (step1 + (Rib) + (TRIM) + (CM) + (Print) + (Doc));
   var con2: any= 0;
   con2 = step6.toFixed(2);
   this.FabPriService.currentEntry.fabricPriceInformation[0].perDozenPrice = con2;
   step7 = (step6 / 12);
   var con3: any= 0;
   con3 = step7.toFixed(2);
   this.FabPriService.currentEntry.fabricPriceInformation[0].perUnitPrice = con3;
   //END OF PRICE CALCULATION
  }
  
}
