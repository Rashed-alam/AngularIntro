import { Component, OnInit } from '@angular/core';
import { BuyersService } from 'src/shared/buyers.service';
import { Buyers } from 'src/shared/buyers.model';
import { UnitofmeasurementService } from 'src/shared/unitofmeasurement.service';
import { UoM } from 'src/shared/unitofmeasurement.model';
import { Sleeves } from 'src/shared/sleeves.model';
import { SleeveTypeService } from 'src/shared/sleeve-type.service';
import { FabricType } from 'src/shared/fabric-type.model';
import { FabricTypeService } from 'src/shared/fabric-type.service';
import { DatePipe } from '@angular/common';
import { ItemNameService } from 'src/shared/item-name.service';
import { NgForm } from '@angular/forms';
import { Items } from 'src/shared/item.model';
import { FabricCalculationService } from 'src/shared/fabric-calculation.service';
import { FabricCalulation } from 'src/shared/fabricCalculation.model';
import { SizelistService } from 'src/shared/sizelist.service';
import { SizeList } from 'src/shared/sizelist.model';
import { Router } from "@angular/router";
import { parseDate } from 'ngx-bootstrap';

@Component({
  selector: 'app-fabric-calculation',
  templateUrl: './fabric-calculation.component.html',
  styleUrls: ['./fabric-calculation.component.css']
})
export class FabricCalculationComponent implements OnInit {
  allBuyers: Buyers [];
  allUoM: UoM[];
  allSleeveType: Sleeves[];
  allFabricType: FabricType[];
  allItems: Items[];
  FabricCalc: FabricCalulation[];
  allSize: SizeList[];
  showsuccessmessageforsubmitting:boolean;
  showsuccessmessageforsize: boolean;
  serverErrorMessages: boolean;
  showeditmessage: boolean;
  showdeletemessage: boolean;
  today: any = Date.now(); //for showing today's date
  archievedate: any =Date.now();// for showing date and time into archieve
  autoID: any;
  sizeID: any;
  changeUser = "Ashraf";
  changeDate = this.today;
  deleteevent= "delete";
  editevent="edit";
  swapVariableForArchieve;
  BoysTshirtSelected: boolean = false; 
  JacketSelected: boolean = false;
  ShortsSelected: boolean = false;
  x: any; //for holding the item name selection click of item name
  fabricWeight: any;// for holding the fabric weight and sending it to the database
  referid: string;//for holding the refernce number 

  constructor(private Bs:BuyersService, 
        private Ums:UnitofmeasurementService, 
        private St: SleeveTypeService,
        private ft: FabricTypeService,
        private DP: DatePipe,
        private In: ItemNameService,
        private Fc: FabricCalculationService,
        private Sl: SizelistService,
        private router : Router
        ) { }
    
  ngOnInit() { 
   const present = this.DP.transform(this.today, "dd-MM-yyyy");
   this.today = present;
   const datewithtime = this.DP.transform(this.archievedate, "medium");
   this.archievedate= datewithtime;
   this.getAllBuyersList();
   this.getAllSize();
   this.getAllSleeveType();
   this.getAllFabrics();
   this.getAllItems();
   this.getAutoGeneratedID();
   this.getSizeID();
   this.getallFabricEntries();
   this.getAllUms();

  }
  
  //this function is for calculating the fabric weight
  calculate(){
    var wastePercentage: any= 0; //waste percentage
    var chestsize: any= 0;
    var lengthsize: any= 0 ;
    var sleevesize: any = 0;
    var hoodsize: any= 0;
    var bottomsize: any = 0;
    var thighsize: any = 0;
    var pocketsize: any = 0;
    var fabricsize: any= 0;// for gsm value
    wastePercentage = this.Fc.currentFabricCalc.waste_percentage;
    fabricsize = this.Fc.currentFabricCalc.fabrics;
    //conversion from inch to cm
    if(this.Fc.currentFabricCalc.chest_unit_of_measurement=='Inch'){
      chestsize = this.Fc.currentFabricCalc.chest*2.54;
    }else{
      chestsize = this.Fc.currentFabricCalc.chest;
    }
    if(this.Fc.currentFabricCalc.thigh_unit_of_measurement=='Inch'){
      thighsize = this.Fc.currentFabricCalc.thigh*2.54;
    }else{
      thighsize = this.Fc.currentFabricCalc.thigh;
    }

    if(this.Fc.currentFabricCalc.length_unit_of_measurement=='Inch'){
      lengthsize = this.Fc.currentFabricCalc.length*2.54;
    }else{
      lengthsize = this.Fc.currentFabricCalc.length;
    }

    if(this.Fc.currentFabricCalc.sleeve_unit_of_measurement=='Inch'){
      sleevesize = this.Fc.currentFabricCalc.sleeve*2.54;
    }else{
      sleevesize = this.Fc.currentFabricCalc.sleeve;
    }

    if(this.Fc.currentFabricCalc.hood_unit_of_measurement=='Inch'){
      hoodsize = this.Fc.currentFabricCalc.hood*2.54;
    }else{
      hoodsize = this.Fc.currentFabricCalc.hood;
    }

    if(this.Fc.currentFabricCalc.bottom_unit_of_measurement=='Inch'){
      bottomsize = this.Fc.currentFabricCalc.bottom*2.54;
    }else{
      bottomsize = this.Fc.currentFabricCalc.bottom;
    }
    
    if(this.Fc.currentFabricCalc.pocket_unit_of_measurement=='Inch'){
      pocketsize = this.Fc.currentFabricCalc.pocket*2.54;
    }else{
      pocketsize = this.Fc.currentFabricCalc.pocket;
    }
    

    //this part is for calculating the boys tshirt fabric
    var step1 : any = 0;
    step1 = parseFloat(lengthsize) + parseFloat(sleevesize);
    console.log("Step 1:"+ step1);
    var step2 : any= 0;
    step2 =((step1*parseFloat(chestsize)*2*parseFloat(fabricsize))/(Math.pow(10,7)))*12;
    console.log("Step 2:"+step2);
    var step3: any = 0;
    step3 = (((wastePercentage)/100)*step2);
    console.log("Step 3:"+ step3);
    var step4: any = 0;
    step4 = (step2 + step3);
    var convertoFloat; 
    convertoFloat = parseFloat(step4).toFixed(5);
    this.fabricWeight = convertoFloat +" Kg/per dozen";//main answer for fabric calculation
    console.log("Step 4:"+ this.fabricWeight);
    //end of fabric calculation of boys tshirt
  }

  //this is for selecting which fields to show upon item name selection
  selectSwitch(){
    this.x = this.Fc.currentFabricCalc.style_item_name;
    if(this.x == "BoysS/Slv Tshirt"){
        this.BoysTshirtSelected = true;
        this.JacketSelected = false;
        this.ShortsSelected = false;
    }
    else if(this.x =="Jacket"){
      this.BoysTshirtSelected = false;
        this.JacketSelected = true;
        this.ShortsSelected = false;
    }
    else{
      this.BoysTshirtSelected = false;
        this.JacketSelected = false;
        this.ShortsSelected = true;
    }   
  }

  //this is for getting the size id from database
  getSizeID(){
    this.Sl.getSizeid()
    .subscribe(
      res => {
        this.sizeID = res['x'];
      },
      err => {
        console.log(err);
      });
  }
 
//this part is for fetching the AutoGenerated ID from the database
  getAutoGeneratedID(){
   this.Fc.getFabricEntry_ID()
   .subscribe(
     res => {
       this.autoID = res['FabricID'];
     },
     err => {
       console.log(err);
     }); 
    
  }

  //this is for getting all the buyers list from database
  getAllBuyersList(){
    this.Bs.getAllBuyers()
    .subscribe(
       (data : Buyers[]) =>{
         this.allBuyers = data;
       });
  }

  //this is for getting all the sizes list from database
  getAllSize(){
    this.Sl.getAllSizeList()
    .subscribe(
       (data : SizeList[]) =>{
         this.allSize = data;
       });
  }

  //this is for getting all the types of sleeves from database
  getAllSleeveType(){
    this.St.getAllSleevesType()
    .subscribe(
       (data : Sleeves[]) =>{
         this.allSleeveType = data;
       });
  }

  //this is for getting all the types of fabrics from database
  getAllFabrics(){
    this.ft.getAllFabricsType()
    .subscribe(
      (data: FabricType[]) => {
        this.allFabricType = data;
      });  
  }
  //this is for getting all the items name from database
  getAllItems(){
    this.In.getAllItemNamesList()
    .subscribe(
      (data: Items[])=>{
        this.allItems = data;
      })
  }

  //this is for creating fabric entry into the database
  createFabric(f: FabricCalulation){
  this.Fc.passReferenceNumber(this.Fc.currentFabricCalc.refNo);   //passsing the reference number to service
   f.fabric_weight=this.fabricWeight;
   this.Fc.createFabricEntry(f)
   .subscribe(
    res => {
      this.showsuccessmessageforsubmitting = true;
      setTimeout(() => this.showsuccessmessageforsubmitting = false, 4000);
      this.getallFabricEntries();
      this.clearAll();
      this.router.navigateByUrl('/report');
    },
    err => {
      if (err.status === 422) {
        this.serverErrorMessages = err.error.join('<br/>');
      }
      else
        this.serverErrorMessages = true;
    });
  }


//this is for clearing all the data from the form
  clearAll(){
    this.Fc.currentFabricCalc = {
        fabricEntry_id: null,
    mailDate: '',
    entryDate: '',
    refNo: '',
    buyer_name: '',
    style_code: '',
    style_item_name: '',
    style_sleeve_type: '',
    size: '',
    fabrics: null,
    chest: null,
    length: null,
    sleeve: null,
    waste_percentage: null,
    hood:null,
    bottom: null,
    thigh: null,
    pocket: null,
    pocket_unit_of_measurement: '',
    thigh_unit_of_measurement: '',
    bottom_unit_of_measurement: '',
    hood_unit_of_measurement: '',
    fabric_weight:null,
    length_unit_of_measurement: '',
    chest_unit_of_measurement: '',
    sleeve_unit_of_measurement: '',
    track_Id: null,
    changeUser: '',
    changeDate: '',
    event:''
    }
  }

//this is for adding new size into the list
  AddNewSize(s: SizeList){
    this.Sl.createSize(s)
    .subscribe();
      this.showsuccessmessageforsize=true;
      setTimeout(()=>this.showsuccessmessageforsize=false,2000); 
      this.clearSize();
      this.getAllSize();
      
  }

  //this is for clearing previous size data
  clearSize(){
    this.Sl.currentSizeList = {
      size_id: '',
      size_name: ''
    }
  }

  //this is for getting all the fabric entries from database
  getallFabricEntries(){
    this.Fc.getAllFabricEntries()
    .subscribe(
      (data: FabricCalulation[])=>{
        this.FabricCalc = data;
      })  
  }

   //this is for deleting an entry from the database
   deleteFabricEntry(f: FabricCalulation){
    var confirmation;
    confirmation= confirm("Are you sure ?");
    if(confirmation == true){
      f.changeUser= this.changeUser;
      f.changeDate= this.archievedate;
      f.event = this.deleteevent;
    this.Fc.createFabricArchieve(f)
    .subscribe(res => {
      this.Fc.deleteFabricEntry(f).subscribe((data) =>{
        this.getallFabricEntries();
        this.showdeletemessage=true;
        setTimeout(()=>this.showdeletemessage=false,4000);
        
      });
    });
     }
  }

  editFabricEntry(FabricCalulation){
    this.Fc.currentFabricCalc = Object.assign({},FabricCalulation);
    this.getallFabricEntries();
    this.swapVariableForArchieve = FabricCalulation;
  }


  //this is for updating any entry from database
  updateFabricEntry(FabCal: FabricCalulation){
    this.swapVariableForArchieve.changeUser = this.changeUser;
    this.swapVariableForArchieve.changeDate = this.archievedate;
    this.swapVariableForArchieve.event = this.editevent;
    this.swapVariableForArchieve._id = null;
      this.Fc.createFabricArchieve(this.swapVariableForArchieve).subscribe(res => {
            this.Fc.updateFabricEntry(FabCal)
    .subscribe((data)=>{
      this.showeditmessage=true;
      setTimeout(()=>this.showeditmessage=false,4000);
      this.getallFabricEntries();
      this.clearAll();
    });
    });
   
  }

  //this is for checking if the blog is to be created or updated
  createAndUpdate(key: any){
    if(key._id  == null){
      this.createFabric(key);
    }
    else{
      this.updateFabricEntry(key);
    }
  }

  //this is for getting all the sizes list from database
  getAllUms(){
    this.Ums.getAllUoM()
    .subscribe(
       (data : UoM[]) =>{
         this.allUoM = data;
       });
  }

}
