import { Component, OnInit } from '@angular/core';
import { BuyersService } from 'src/shared/buyers.service';
import { Buyers } from 'src/shared/buyers.model';
import { UnitofmeasurementService } from 'src/shared/unitofmeasurement.service';
import { UoM } from 'src/shared/unitofmeasurement.model';
import { from } from 'rxjs';
import { Sleeves } from 'src/shared/sleeves.model';
import { SleeveTypeService } from 'src/shared/sleeve-type.service';
import { FabricType } from 'src/shared/fabric-type.model';
import { FabricTypeService } from 'src/shared/fabric-type.service';
import { DatePipe } from '@angular/common';
import { ItemNameService } from 'src/shared/item-name.service';
import { NgForm } from '@angular/forms';
import { Items } from 'src/shared/item.model';
import { FabricCalculationService } from 'src/shared/fabric-calculation.service';
import { FabricCalulation } from 'src/shared/fabricCalculation.model';


@Component({
  selector: 'app-fabric-calculation',
  templateUrl: './fabric-calculation.component.html',
  styleUrls: ['./fabric-calculation.component.css']
})
export class FabricCalculationComponent implements OnInit {

 
  allBuyers: Buyers [];
  allUoM: UoM[];
  allSleeveType: Sleeves[];
  allFabricType: FabricType[];
  allItems: Items[];
  FabricCalc: FabricCalulation[];
  showsuccessmessageforsubmitting:boolean;
  showsuccessmessageforsize: boolean;
  serverErrorMessages: any;
  showeditmessage: boolean;
  showdeletemessage: boolean;
  today: any = Date.now();
  archievedate: any =Date.now();
  public autoID: any;
  public sizeID: any;
  changeUser = "Ashraf";
  changeDate = this.today;
  deleteevent= "delete";
  editevent="edit";


  constructor(private Bs:BuyersService, 
        private Ums:UnitofmeasurementService, 
        private St: SleeveTypeService,
        private ft: FabricTypeService,
        private DP: DatePipe,
        private In: ItemNameService,
        private Fc: FabricCalculationService
        ) { }
    
  ngOnInit() { 
   const present = this.DP.transform(this.today, "dd-MM-yyyy");
   this.today = present;
   const datewithtime = this.DP.transform(this.archievedate, "medium");
   this.archievedate= datewithtime;
   this.getAllBuyersList();
   this.getAllSizeList();
   this.getAllSleeveType();
   this.getAllFabrics();
   this.getAllItems();
   this.getAutoGeneratedID();
   this.getSizeID();
   this.getallFabricEntries();

  }

  //this is for getting the size id from database
  getSizeID(){
    this.Ums.getSizeid()
    .subscribe(
      res => {
        this.sizeID = res['x'];
      },
      err => {
        console.log(err);
      });
  }

//this part is for fetching the AutoGenerated ID from the database
  getAutoGeneratedID(){
   this.Fc.getFabricEntry_ID()
   .subscribe(
     res => {
       this.autoID = res['FabricID'];
     },
     err => {
       console.log(err);
     }); 
    
  }

  //this is for getting all the buyers list from database
  getAllBuyersList(){
    this.Bs.getAllBuyers()
    .subscribe(
       (data : Buyers[]) =>{
         this.allBuyers = data;
       });
  }

  //this is for getting all the sizes list from database
  getAllSizeList(){
    this.Ums.getAllUoM()
    .subscribe(
       (data : UoM[]) =>{
         this.allUoM = data;
       });
  }

  //this is for getting all the types of sleeves from database
  getAllSleeveType(){
    this.St.getAllSleevesType()
    .subscribe(
       (data : Sleeves[]) =>{
         this.allSleeveType = data;
       });
  }

  //this is for getting all the types of fabrics from database
  getAllFabrics(){
    this.ft.getAllFabricsType()
    .subscribe(
      (data: FabricType[]) => {
        this.allFabricType = data;
      });  
  }
  //this is for getting all the items name from database
  getAllItems(){
    this.In.getAllItemNamesList()
    .subscribe(
      (data: Items[])=>{
        this.allItems = data;
      })
  }

  //this is for creating fabric entry into the database
  createFabric(f: FabricCalulation){
   this.Fc.createFabricEntry(f)
   .subscribe(
    res => {
      this.showsuccessmessageforsubmitting = true;
      setTimeout(() => this.showsuccessmessageforsubmitting = false, 4000);
      this.getallFabricEntries();
      this.clearAll();
    },
    err => {
      if (err.status === 422) {
        this.serverErrorMessages = err.error.join('<br/>');
      }
      else
        this.serverErrorMessages = 'Something went wrong.Please contact admin.';
    }
    
   );
  }


//this is for clearing all the data from the form
  clearAll(){
    this.Fc.currentFabricCalc = {
      fabricEntry_id: null,
      mailDate: '',
      entryDate: '',
      refNo: '',
      buyer_name: '',
      style_code: '',
      style_item_name: '',
      style_sleeve_type: '',
      size: '',
      fabrics: '',
      chest: '',
      length: '',
      sleeve: '',
      length_unit_of_measurement: '',
      chest_unit_of_measurement: '',
      sleeve_unit_of_measurement: '',
      track_Id: null,
    changeUser: '',
    changeDate: '',
    event:''
    }
  }

//this is for adding new size into the list
  AddNewSize(size: UoM){
    this.Ums.createSize(size)
    .subscribe();
      this.showsuccessmessageforsize=true;
      setTimeout(()=>this.showsuccessmessageforsize=false,4000); 
      this.getAllSizeList();
      this.clearSize();
      
  }

  //this is for clearing previous size data
  clearSize(){
    this.Ums.currentUoM = {
      Uom_id: '',
      Uom_name: ''
    }
  }

  //this is for getting all the fabric entries from database
  getallFabricEntries(){
    this.Fc.getAllFabricEntries()
    .subscribe(
      (data: FabricCalulation[])=>{
        this.FabricCalc = data;
        console.log(data);
      })  
  }

   //this is for deleting an entry from the database
   deleteFabricEntry(f: FabricCalulation){
    var confirmation;
    confirmation= confirm("Are you sure ?");
    if(confirmation == true){
      f.changeUser= this.changeUser;
      f.changeDate= this.archievedate;
      f.event = this.deleteevent;
    this.Fc.createFabricArchieve(f)
    .subscribe(res => {
      this.Fc.deleteFabricEntry(f).subscribe((data) =>{
        this.getallFabricEntries();
        this.showdeletemessage=true;
        setTimeout(()=>this.showdeletemessage=false,4000);
        
      });
    });
     }
  }

  


  editFabricEntry(FabricCalulation){
    this.Fc.currentFabricCalc = Object.assign({},FabricCalulation);
    this.getallFabricEntries();
  }


  //this is for updating any entry from database
  updateFabricEntry(FabCal: FabricCalulation){
    FabCal.changeUser= this.changeUser;
    FabCal.changeDate= this.archievedate;
    FabCal.event = this.editevent;
      this.Fc.createFabricArchieve(FabCal).subscribe(res => {
            this.Fc.updateFabricEntry(FabCal)
    .subscribe((data)=>{
      this.showeditmessage=true;
      setTimeout(()=>this.showeditmessage=false,4000);
      this.getallFabricEntries();
      this.clearAll();
    });
    });
   
  }

  //this is for checking if the blog is to be created or updated
  createAndUpdate(key: any){
    if(key._id  == null){
      this.createFabric(key);
    }
    else{
      this.updateFabricEntry(key);
    }
  }

   

}
